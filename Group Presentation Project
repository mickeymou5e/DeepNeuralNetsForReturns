{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4","collapsed_sections":["bcRHD-ZPDieW"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"TulPKLbLsOmx"},"source":["# **Big Data in Finance II Group Assignment**"]},{"cell_type":"markdown","source":["**Group 7 Members:**\n","- 01705898 Gus Lee  \n","- 02324852 Baiyu Lu\n","- 02333891 Dmitry Tertychnyy \n","- 02283242 Patrik Kovac\n"],"metadata":{"id":"Cs7eRMFqPX4Y"}},{"cell_type":"markdown","source":["# Library Import"],"metadata":{"id":"BKR5sW8Tyaja"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","from datetime import datetime\n","from dateutil.relativedelta import relativedelta\n","import matplotlib.dates as mdates\n","\n","# for Google Colab\n","from google.colab import drive \n","drive.mount('/content/drive')\n","\n","# for GBM\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","\n","# for RandomForest\n","from sklearn.ensemble import RandomForestRegressor\n","\n","# for OLS \n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KKXDqQewzXWx","executionInfo":{"status":"ok","timestamp":1686145201454,"user_tz":-120,"elapsed":3847,"user":{"displayName":"Dmitry Tertychnyy","userId":"01455676677788782180"}},"outputId":"e1204e2f-ad79-46eb-941c-1252bcea9ebd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# Data Handling"],"metadata":{"id":"2GTKq01mwI37"}},{"cell_type":"markdown","source":["### **Implementation**\n","In this section we undertake the task of building our dataset. We read the data from pickle and save it as a pandas dataframe. We then remove some of the variables and separate the data into our dependent and independent variables. "],"metadata":{"id":"zgJvlzVMCnW_"}},{"cell_type":"code","source":["# Import data\n","panel = pd.read_pickle(\"/content/drive/MyDrive/Big_Data_Fin2/Data/returns_chars_panel.pkl\") # stock characteristics\n","macro = pd.read_pickle(\"/content/drive/MyDrive/Big_Data_Fin2/Data/macro_timeseries.pkl\")    # macro indices"],"metadata":{"id":"SB42xsc0y_Qu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# In the paper, variables 'crsp_spvw' , 'dfr', 'infl' are not used so we drop them.\n","# We keep the same dataset as from the coursework.\n","macro.drop(columns=['crsp_spvw','dfr','infl'], inplace=True)\n","macro_pred = macro.columns.to_list()\n","macro_pred.remove('date')\n","\n","# Combine micro and macro data\n","df = pd.merge(panel, macro, on='date', how='left', suffixes=['','_macro'])\n","df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vskwp7c9zBj4","executionInfo":{"status":"ok","timestamp":1686145240691,"user_tz":-120,"elapsed":7240,"user":{"displayName":"Dmitry Tertychnyy","userId":"01455676677788782180"}},"outputId":"7e4d227d-6037-4e27-c788-d40c50b83239"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3739449, 107)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# to save the storing space\n","del panel, macro"],"metadata":{"id":"f069roiWzBnz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# features (X) + targets (Y)\n","# Note: for X, use everything except return info, IDs and excess macro variables\n","X = df.drop(columns=['ret', 'excess_ret', 'rfree', 'permno', 'date']) \n","y = df['excess_ret']"],"metadata":{"id":"YwO-izomzBqq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Functions"],"metadata":{"id":"lc_IWhEvRfTv"}},{"cell_type":"markdown","source":["## **custom_ts_split**\n","\n","This function aims to create a generator object of date which specify the times at which we will be splitting our values into train, validate and test. This is very similar to the work of Gu, Kelly and Xiu (2019). This object will then be passed to the dataframe date column to split our dataframes containing the dependent and independent values into train, validate and test. The ranges are generated by adding the sizes of the training, validation, and test sets to the start year, and then advancing the start year by the step size in each iteration. \n"],"metadata":{"id":"bcRHD-ZPDieW"}},{"cell_type":"code","source":["def custom_ts_split(start_year, end_year, train_size, val_size, test_size, step):\n","    \n","    # Convert string and integer to datetime format\n","    start_year_dt = datetime.strptime(start_year, '%Y-%m')\n","    end_year_dt = datetime.strptime(end_year, '%Y-%m')\n","    train_size_dt = relativedelta(years=train_size)\n","    val_size_dt = relativedelta(years=val_size)\n","    test_size_dt = relativedelta(years=test_size)\n","    step_dt = relativedelta(years=step)\n","    \n","    current_year = start_year_dt\n","    \n","    while current_year + train_size_dt + val_size_dt + test_size_dt <= end_year_dt + relativedelta(years=1):\n","        \n","        # Get train start and end date\n","        train_start = start_year_dt\n","        train_end = current_year + train_size_dt\n","        \n","        # Get validation start and end date\n","        val_start = train_end\n","        val_end = val_start + val_size_dt\n","        \n","        # Get test start and end date\n","        test_start = val_end\n","        test_end = test_start + test_size_dt\n","        if test_end < end_year_dt:\n","            test_end = test_end\n","        else:\n","            test_end = end_year_dt\n","\n","        yield train_end, val_end, test_end\n","\n","        current_year += step_dt"],"metadata":{"id":"AhCCrdprRiO-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **get_tscv_plot**\n","\n","The function get_tscv_plot aims to provide visualization of the train cross-validate and test folds. It utilises a similar logic as custom_ts_split to produce the time periods, and it accepts the same inputs. It constructs a horizontal bar plot displaying the train, validation, and test splits for each fold.\n","\n"],"metadata":{"id":"Snep_pOrGe46"}},{"cell_type":"code","source":["def get_tscv_plot(start_year, end_year, train_size, val_size, test_size, step):\n","    \n","    # Convert str and int into a datetime compatible format\n","    start_year_dt = datetime.strptime(start_year, '%Y-%m')\n","    end_year_dt = datetime.strptime(end_year, '%Y-%m')\n","    train_size_dt = relativedelta(years=train_size)\n","    val_size_dt = relativedelta(years=val_size)\n","    test_size_dt = relativedelta(years=test_size)\n","    step_dt = relativedelta(years=step)\n","    \n","    # Get all the date indexes for all the folds into a dictionary\n","    folds = []\n","    current_year = start_year_dt\n","    \n","    while current_year + train_size_dt + val_size_dt + test_size_dt <= end_year_dt + relativedelta(years=1):\n","        \n","        train_start = start_year_dt\n","        train_end = current_year + train_size_dt\n","        \n","        val_start = train_end\n","        val_end = val_start + val_size_dt\n","        \n","        test_start = val_end\n","        test_end = test_start + test_size_dt\n","        if test_end < end_year_dt:\n","            test_end = test_end\n","        else:\n","            test_end = end_year_dt\n","\n","        date_info = {'train_start':start_year_dt, 'train_end':train_end, 'val_start':val_start, 'val_end':val_end, \n","                     'test_start':test_start, 'test_end':test_end}\n","        folds.append(date_info)\n","        current_year += step_dt\n","    \n","    # Set up the plot\n","    fig, ax = plt.subplots(figsize=(12,6))\n","    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n","\n","    # Set the y-axis ticks and labels\n","    y_ticks = range(1, len(folds) + 1)\n","    y_labels = [f'Fold {i}' for i in y_ticks[::-1]]\n","    ax.set_yticks(y_ticks)\n","    ax.set_yticklabels(y_labels)\n","\n","    # Plot the bars for each fold\n","    i = 1\n","    for fold in folds[::-1]:\n","        train_start = fold['train_start']\n","        train_end = fold['train_end']\n","        val_start = fold['val_start']\n","        val_end = fold['val_end']\n","        test_start = fold['test_start']\n","        test_end = fold['test_end']\n","\n","        ax.barh(i, train_end - train_start, left=train_start, height=0.5, color='blue', label='Train')\n","        ax.barh(i, val_end - val_start, left=val_start, height=0.5, color='orange', label='Validation')\n","        ax.barh(i, test_end - test_start, left=test_start, height=0.5, color='red', label='Test')\n","        i += 1\n","\n","    # Set the x-axis limits and labels\n","    ax.set_xlim(folds[0]['train_start'].replace(month=1), folds[-1]['test_end'].replace(month=1))\n","    ax.set_xlabel('Year')\n","\n","    # Add a legend\n","    handles = [plt.Rectangle((0, 0), 1, 1, color='blue'),\n","               plt.Rectangle((0, 0), 1, 1, color='orange'),\n","               plt.Rectangle((0, 0), 1, 1, color='red')]\n","    labels = ['Train', 'Validation', 'Test']\n","    ax.legend(handles, labels, loc='upper right')\n","\n","    # Show the plot\n","    plt.show()\n","    \n","    return None"],"metadata":{"id":"RozNz-cyRjF6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **normalize**\n","\n","The function normalize aims to take any series of values and return the series as a normalized decimal. It works by taking a series of values and then takes thier sum. Once we have the sum every value in the series divided by total sum to gain the decimal. Since this is done using list comprehension a list is returned. \n"],"metadata":{"id":"e2Me5yFmIMKF"}},{"cell_type":"code","source":["def normalize(values):\n","    \n","    total = sum(values)\n","    normalized_values = [x / total for x in values]\n","    \n","    return normalized_values"],"metadata":{"id":"TU6RfrgaRoNy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **get_var_imp_plot**\n","\n","Lastly, get_var_imp_plot is just a plotting function which takes a variaety of labels and values and then plots them in decreasing order using a horizontal bar graph. \n"],"metadata":{"id":"eyf7AA_WIRaE"}},{"cell_type":"code","source":["def get_var_imp_plot(var_imp_df, model): \n","  \n","  # Sort the variable importance in ascending order\n","  sorted_var_imp = var_imp_df.sort_values('Variable Importance', ascending=True)\n","\n","  # Plot the horizontal bar plot\n","  sorted_var_imp.plot.barh(x='Predictor', y='Variable Importance', legend=False)\n","\n","  # Set the plot title and axis labels\n","  plt.title(f'{model}')\n","  plt.ylabel('Predictor')\n","\n","  # Show the plot\n","  plt.show()"],"metadata":{"id":"ut5sTSbuRp0Y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Rolling Window Settings**\n"],"metadata":{"id":"aT_7AvI_Rv0g"}},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"],"metadata":{"id":"Nk81CyndRvEm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["get_tscv_plot(start_year, end_year, train_size, val_size, test_size, step)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"-o7_G-U11PmN","executionInfo":{"status":"ok","timestamp":1686143873755,"user_tz":-120,"elapsed":323,"user":{"displayName":"Dmitry Tertychnyy","userId":"01455676677788782180"}},"outputId":"924d23b7-eff1-47b9-e22c-2f3902d19dfa"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### **Implementation**\n","We elaborate on the work of Gu, Kelly and Xiu (2019) by building up three models that try to predict returns. We first use a simple OLS regression with two sets of features. We then employ a gradient boosted machine model and finally a random forest framework. We then compare the performances with each other and the original study as well.\n","\n","We follow the paper to form a dataset that contains montly stock returns from 1957 to 2016. There are data 94 charateristic features of the stock plus 8 macroeconomic predictors. The whole dataset is of the shape (3739449, 107).\n","\n","We configure our parameters using grid search \n","\n","**Tuning for OLS:**\n",">- f: S → L\n","- x ∈ S\n","- X_all = {x1, x2, ..., xn} as the set of all variables\n","- X_top = {x'_1, x'_2, ..., x'_10} as the set of the 10 most important variables\n","\n",">Model 1\n","  - L_all = *L*(**y**, *h*(X_all))\n","\n",">Model 2 \n","  - L_top = *L*(**y**, *h*(X_top))\n","\n","**Tuning for GBM:**\n",">params = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'max_depth': [1,3,5,9],\n","    'learning_rate': [0.01, 0.1, 0.001],\n","    #'loss': ['reg:squarederror'] #objective maybe if it does't work?\n","}\n","\n",">**Tuning for RF:**\n",">\n","\n"],"metadata":{"id":"uqb8-HddP5Q3"}},{"cell_type":"markdown","source":["\n","### **Check for specific rolling dates**\n"],"metadata":{"id":"Oz9aEUSLSyiX"}},{"cell_type":"code","source":["for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    print(f\"Fold {i+1}:\")\n","    \n","    #train_set = your_data[train_index]\n","    print(f\"Train end: index={train_end}\")\n","    \n","    #val_set = your_data[val_index]\n","    print(f\"Validation end:  index={val_end}\")\n","    \n","    #test_set = your_data[test_index]\n","    print(f\"Test end:  index={test_end}\\n\")"],"metadata":{"id":"nUBUeji9CiFb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686143875016,"user_tz":-120,"elapsed":2,"user":{"displayName":"Dmitry Tertychnyy","userId":"01455676677788782180"}},"outputId":"49f6a571-d67c-4070-c5e7-1e932c26e826"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fold 1:\n","Train end: index=1987-03-01 00:00:00\n","Validation end:  index=2007-03-01 00:00:00\n","Test end:  index=2009-03-01 00:00:00\n","\n","Fold 2:\n","Train end: index=1989-03-01 00:00:00\n","Validation end:  index=2009-03-01 00:00:00\n","Test end:  index=2011-03-01 00:00:00\n","\n","Fold 3:\n","Train end: index=1991-03-01 00:00:00\n","Validation end:  index=2011-03-01 00:00:00\n","Test end:  index=2013-03-01 00:00:00\n","\n","Fold 4:\n","Train end: index=1993-03-01 00:00:00\n","Validation end:  index=2013-03-01 00:00:00\n","Test end:  index=2015-03-01 00:00:00\n","\n","Fold 5:\n","Train end: index=1995-03-01 00:00:00\n","Validation end:  index=2015-03-01 00:00:00\n","Test end:  index=2016-12-01 00:00:00\n","\n"]}]},{"cell_type":"markdown","source":["# Model Fitting "],"metadata":{"id":"iezpfczfF7LF"}},{"cell_type":"markdown","source":["### **(OLS - All Features)**\n"],"metadata":{"id":"1bGY_OE_Na-L"}},{"cell_type":"markdown","source":["In this section we will implement a standard OLS regression with all the features. *{Add the R-sqared here and comment on it}*. In literature the rationale behind using OLS is to have a baseline prediction model we are trying to beat. As such we have decided to use the OLS as a baseline. We utilized two versions of the OLS, one with all the features and one with only 10 of the features. "],"metadata":{"id":"RxJDM3MqMs30"}},{"cell_type":"code","source":["# Split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create an OLS model\n","model = LinearRegression()\n","\n","# Fit the model\n","model.fit(X_train, y_train)\n","\n","# Predict the target variable for the test set\n","y_pred = model.predict(X_test)\n","\n","# Calculate the accuracy (optional, as we're dealing with regression, not classification)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f\"R-squared: {r2}\")"],"metadata":{"id":"c2EaNB_PHu_r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **OLS - 10 Features Only**"],"metadata":{"id":"SiybMvNADmkx"}},{"cell_type":"markdown","source":["In this section we will implement a standard OLS regression with 10 of the features, which were the top 10 most important features in the ANN model. *{Add the R-sqared here and comment on it}*. The OLS model with less features performed better than the one with more which suggests that a lot of the fetaures are just noise when predicting using a linear estimator / model. {Comment on the comparison of the  p values as well to see if they are significantly different}"],"metadata":{"id":"cpAwhIToBK6M"}},{"cell_type":"code","source":["# Select variables for the model\n","selected_vars = ['maxret', 'std_turn', 'ill', 'lev', 'chcsho', 'operprof', 'cfp_ia', 'turn', 'sp', 'orgcap']\n","X = df[selected_vars]\n","y = df['excess_ret']\n","\n","# Split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create an OLS model\n","model = LinearRegression()\n","\n","# Fit the model\n","model.fit(X_train, y_train)\n","\n","# Predict the target variable for the test set\n","y_pred = model.predict(X_test)\n","\n","# Calculate the accuracy (optional, as we're dealing with regression, not classification)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f\"R-squared: {r2}\")"],"metadata":{"id":"-WxJIM1UDrrJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **GBM**\n","In this section we employ a more advanced ML technique and use XG Boost to predict the return. XG boost is a Gradient Boosting Model that is a ensable learning method. This means that it addively creates weak learners and then adds them together to create a model with greate predictive accuracy. We use grid search and cross validation to find the optimal setup for our \n"],"metadata":{"id":"1aD71N7KxZNX"}},{"cell_type":"code","source":["def are_all_columns_numeric(df):\n","    numeric_cols = df.select_dtypes(include=[float, int]).columns\n","    return len(numeric_cols) == len(df.columns)\n"],"metadata":{"id":"K43ZAGTtS1wG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if are_all_columns_numeric(df):\n","    print(\"All columns are numeric\")\n","else:\n","    print(\"Not all columns are numeric\")"],"metadata":{"id":"3pRgye8oWRKV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2\n","\n","import pandas as pd\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import accuracy_score\n","\n","# Load your data\n","# df = pd.read_csv('your_data.csv')\n","# Assume you already have X (features) and y (labels)\n","\n","# Set up our parameters for GBM\n","params = {\n","    'n_estimators': [50, 100, 150, 200],\n","    'max_depth': [1,3,5,9],\n","    'learning_rate': [0.01, 0.1, 0.5],\n","    #'loss': ['reg:squarederror'] #objective maybe if it does't work?\n","}\n","\n","# Instantiate the classifier \n","gbm_reg = GradientBoostingRegressor()\n","\n","# Initialize accuracy list\n","accuracies = []\n","\n","# Convert 'date' column to datetime if it's not already\n","try:\n","  df['date'] = pd.to_datetime(df['date'])\n","except:\n","  pass\n","\n","# Define custom time series splitter that yields indices\n","def custom_ts_split_indices(df, date_col, train_end, test_start, test_end):\n","    train_indices = df[df[date_col] < train_end].index\n","    test_indices = df[(df[date_col] >= test_start) & (df[date_col] < test_end)].index\n","    return [(train_indices, test_indices)]\n","\n","# Using your custom time series split function\n","for train_end, val_end, test_end in custom_ts_split(start_year=start_year, end_year=end_year, train_size=train_size, val_size=val_size, test_size=test_size, step=step):\n","    \n","    # For simplicity, we will just use the training set and the test set. \n","    # You can utilize the validation set for hyperparameter tuning or early stopping.\n","    \n","    # Select data for the training and test sets\n","    train_data = df[df['date'] < train_end]\n","    test_data = df[(df['date'] >= test_start) & (df['date'] < test_end)]\n","    \n","    # Separate features and labels\n","    X_train, y_train = train_data.drop('label', axis=1), train_data['label']\n","    X_test, y_test = test_data.drop('label', axis=1), test_data['label']\n","    \n","    # Set up the grid search with cross-validation\n","    gbm_cv = GridSearchCV(gbm_reg, params, cv=custom_ts_split_indices(df, 'date', train_end, val_end, test_end))\n","    \n","    # Fit the model and find optimal hyperparameters\n","    gbm_cv.fit(X_train, y_train)\n","    \n","    # Make predictions using the model with the best found hyperparameters\n","    preds = gbm_cv.predict(X_test)\n","    \n","    # Evaluate accuracy and append to accuracy list\n","    acc = accuracy_score(y_test, preds)\n","    accuracies.append(acc)\n","\n","# Calculate mean accuracy over all splits\n","mean_acc = sum(accuracies) / len(accuracies)\n","print(f\"Mean accuracy: {mean_acc}\")\n"],"metadata":{"id":"GFG5cEWvbDGI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **RandomForest**\n","\n","---\n","\n"],"metadata":{"id":"A-JirWfNUZhW"}},{"cell_type":"code","source":["# Split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create a random forest model\n","model = RandomForestRegressor()\n","\n","# Fit the model\n","model.fit(X_train, y_train)\n","\n","# Predict the target variable for the test set\n","y_pred = model.predict(X_test)\n","\n","# Calculate the accuracy (optional, as we're dealing with regression, not classification)\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(f\"Accuracy: {accuracy}\")\n","\n","# Get feature importances\n","importances = model.feature_importances_\n","feature_names = X.columns.tolist()\n","feature_importances = pd.DataFrame({'Feature': feature_names, 'Importance': importances})\n","top_10_features = feature_importances.nlargest(10, 'Importance')\n","\n","print(\"Top 10 Features:\")\n","print(top_10_features)"],"metadata":{"id":"FBV6ySoYcCbY"},"execution_count":null,"outputs":[]}]}