{"cells":[{"cell_type":"markdown","metadata":{"id":"TulPKLbLsOmx"},"source":["# **Big Data in Finance II Group Assignment**"]},{"cell_type":"markdown","source":["**Group 7 Members:**\n","- 01705898 Gus Lee  \n","- 02324852 Baiyu Lu\n","- 02333891 Dmitry Tertychnyy \n","- 02283242 Patrik Kovac\n"],"metadata":{"id":"Cs7eRMFqPX4Y"}},{"cell_type":"markdown","source":["## Library Import"],"metadata":{"id":"NXnClbCkYnsd"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21984,"status":"ok","timestamp":1686251834695,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"4zPjfZAenHzw","outputId":"1641b6bb-55d5-43d5-a5ae-41a239ae3d0b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","from datetime import datetime\n","from dateutil.relativedelta import relativedelta\n","import matplotlib.dates as mdates\n","\n","# for Google Colab\n","from google.colab import drive \n","drive.mount('/content/drive')\n","\n","# For Linear\n","from sklearn.linear_model import LinearRegression\n","\n","# For LASSO\n","from sklearn.linear_model import Lasso\n","\n","# Random Forest\n","from sklearn.ensemble import RandomForestRegressor\n","\n","# for GBM\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_squared_error\n","\n","# for SVM\n","from sklearn.svm import SVR"]},{"cell_type":"markdown","metadata":{"id":"flJCD6oaqO-n"},"source":["## Data Handling"]},{"cell_type":"markdown","source":["In this section we undertake the task of building our dataset. We read the data from pickle and save it as a pandas dataframe. We then remove some of the variables and separate the data into our dependent and independent variables. "],"metadata":{"id":"zgJvlzVMCnW_"}},{"cell_type":"code","source":["# Import data\n","panel = pd.read_pickle(\"/content/drive/MyDrive/Big_Data_Fin2/Data/returns_chars_panel.pkl\") # stock characteristics\n","macro = pd.read_pickle(\"/content/drive/MyDrive/Big_Data_Fin2/Data/macro_timeseries.pkl\")    # macro indices"],"metadata":{"id":"SB42xsc0y_Qu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# In the paper, variables 'crsp_spvw' , 'dfr', 'infl' are not used so we drop them.\n","# We keep the same dataset as from the coursework.\n","macro.drop(columns=['crsp_spvw','dfr','infl'], inplace=True)\n","macro_pred = macro.columns.to_list()\n","macro_pred.remove('date')\n","\n","# Combine micro and macro data\n","df = pd.merge(panel, macro, on='date', how='left', suffixes=['','_macro'])\n","df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vskwp7c9zBj4","executionInfo":{"status":"ok","timestamp":1686145240691,"user_tz":-120,"elapsed":7240,"user":{"displayName":"Dmitry Tertychnyy","userId":"01455676677788782180"}},"outputId":"7e4d227d-6037-4e27-c788-d40c50b83239"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3739449, 107)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# to save the storing space\n","del panel, macro"],"metadata":{"id":"f069roiWzBnz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# features (X) + targets (Y)\n","# Note: for X, use everything except return info, IDs and excess macro variables\n","X = df.drop(columns=['ret', 'excess_ret', 'rfree', 'permno', 'date']) \n","y = df['excess_ret']"],"metadata":{"id":"YwO-izomzBqq"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a7hfRFqKpY6S"},"outputs":[],"source":["# Import data\n","panel = pd.read_pickle(\"/content/drive/MyDrive/BDFII_Assignment/Data/returns_chars_panel.pkl\") # stock characteristics\n","macro = pd.read_pickle(\"/content/drive/MyDrive/BDFII_Assignment/Data/macro_timeseries.pkl\")    # macro indices"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5459,"status":"ok","timestamp":1686134818865,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"Y4mj1LLNpZMp","outputId":"02aa6819-f228-4520-edab-f873b110c03c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3739449, 107)"]},"metadata":{},"execution_count":3}],"source":["# In the paper, variables 'crsp_spvw' , 'dfr', 'infl' are not used so we drop them\n","macro.drop(columns=['crsp_spvw','dfr','infl'], inplace=True)\n","macro_pred = macro.columns.to_list()\n","macro_pred.remove('date')\n","\n","# Combine micro and macro data\n","df = pd.merge(panel, macro, on='date', how='left', suffixes=['','_macro'])\n","df.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FaDOYBelqfhp"},"outputs":[],"source":["# to save the storing space\n","del panel, macro"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fY2Tqu9dqfle"},"outputs":[],"source":["# features (X) + targets (Y)\n","# Note: for X, use everything except return info, IDs and excess macro variables\n","X = df.drop(columns=['ret', 'excess_ret', 'rfree', 'permno', 'date']) \n","y = df['excess_ret']"]},{"cell_type":"markdown","metadata":{"id":"-ODD7Ywvq4AU"},"source":["# Functions"]},{"cell_type":"markdown","source":["## **custom_ts_split**\n","\n","This function aims to create a generator object of date which specify the times at which we will be splitting our values into train, validate and test. This is very similar to the work of Gu, Kelly and Xiu (2019). This object will then be passed to the dataframe date column to split our dataframes containing the dependent and independent values into train, validate and test. The ranges are generated by adding the sizes of the training, validation, and test sets to the start year, and then advancing the start year by the step size in each iteration. \n"],"metadata":{"id":"bcRHD-ZPDieW"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"YARZKDBxqfor"},"outputs":[],"source":["def custom_ts_split(start_year, end_year, train_size, val_size, test_size, step):\n","    \n","    '''\n","    To create relevant dates for rolling window procedure (for tuning hyperparameters and testing models)\n","\n","    Inputs:\n","      > start_year: start month and year of the rolling window process (str)\n","      > end_year: end month and year of the rolling window process (str)\n","      > train_size: training set period (in years) for fold 1 (int)\n","      > val_size: fixed validation set period (in years) (int)\n","      > test_size: fixed test set period (in years) (int)\n","      > step: increase in size of training set from fold n to fold n+1 (int)\n","    Outputs:\n","      > train_end: end period for the training set of fold n (datetime)\n","      > val_end: end period for the validation set of fold n (datetime)\n","      > test_end: end period for the test set of fold n (datetime) \n","    '''\n","\n","    # Convert string and integer to datetime format\n","    start_year_dt = datetime.strptime(start_year, '%Y-%m')\n","    end_year_dt = datetime.strptime(end_year, '%Y-%m')\n","    train_size_dt = relativedelta(years=train_size)\n","    val_size_dt = relativedelta(years=val_size)\n","    test_size_dt = relativedelta(years=test_size)\n","    step_dt = relativedelta(years=step)\n","    \n","    current_year = start_year_dt\n","    \n","    while current_year + train_size_dt + val_size_dt + test_size_dt <= end_year_dt + relativedelta(years=1):\n","        \n","        # Get train start and end date\n","        train_start = start_year_dt\n","        train_end = current_year + train_size_dt\n","        \n","        # Get validation start and end date\n","        val_start = train_end\n","        val_end = val_start + val_size_dt\n","        \n","        # Get test start and end date\n","        test_start = val_end\n","        test_end = test_start + test_size_dt\n","        if test_end < end_year_dt:\n","            test_end = test_end\n","        else:\n","            test_end = end_year_dt\n","\n","        yield train_end, val_end, test_end\n","\n","        current_year += step_dt"]},{"cell_type":"markdown","source":["## **get_tscv_plot**\n","\n","The function get_tscv_plot aims to provide visualization of the train cross-validate and test folds. It utilises a similar logic as custom_ts_split to produce the time periods, and it accepts the same inputs. It constructs a horizontal bar plot displaying the train, validation, and test splits for each fold.\n","\n"],"metadata":{"id":"Snep_pOrGe46"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"tCY8H4Fyqfs3"},"outputs":[],"source":["def get_tscv_plot(start_year, end_year, train_size, val_size, test_size, step):\n","    \n","    '''\n","    Get a visualisation of how training, validation and test set are splitted for each of the folds in rolling window validation\n","\n","    Inputs:\n","      > start_year: start month and year of the rolling window process (str)\n","      > end_year: end month and year of the rolling window process (str)\n","      > train_size: training set period (in years) for fold 1 (int)\n","      > val_size: fixed validation set period (in years) (int)\n","      > test_size: fixed test set period (in years) (int)\n","      > step: increase in size of training set from fold n to fold n+1 (int)\n","    Outputs:\n","      > Horizontal bar plot illustrating rolling window validation \n","    '''\n","\n","    # Convert str and int into a datetime compatible format\n","    start_year_dt = datetime.strptime(start_year, '%Y-%m')\n","    end_year_dt = datetime.strptime(end_year, '%Y-%m')\n","    train_size_dt = relativedelta(years=train_size)\n","    val_size_dt = relativedelta(years=val_size)\n","    test_size_dt = relativedelta(years=test_size)\n","    step_dt = relativedelta(years=step)\n","    \n","    # Get all the date indexes for all the folds into a dictionary\n","    folds = []\n","    current_year = start_year_dt\n","    \n","    while current_year + train_size_dt + val_size_dt + test_size_dt <= end_year_dt + relativedelta(years=1):\n","        \n","        train_start = start_year_dt\n","        train_end = current_year + train_size_dt\n","        \n","        val_start = train_end\n","        val_end = val_start + val_size_dt\n","        \n","        test_start = val_end\n","        test_end = test_start + test_size_dt\n","        if test_end < end_year_dt:\n","            test_end = test_end\n","        else:\n","            test_end = end_year_dt\n","\n","        date_info = {'train_start':start_year_dt, 'train_end':train_end, 'val_start':val_start, 'val_end':val_end, \n","                     'test_start':test_start, 'test_end':test_end}\n","        folds.append(date_info)\n","        current_year += step_dt\n","    \n","    # Set up the plot\n","    fig, ax = plt.subplots(figsize=(12,6))\n","    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n","\n","    # Set the y-axis ticks and labels\n","    y_ticks = range(1, len(folds) + 1)\n","    y_labels = [f'Fold {i}' for i in y_ticks[::-1]]\n","    ax.set_yticks(y_ticks)\n","    ax.set_yticklabels(y_labels)\n","\n","    # Plot the bars for each fold\n","    i = 1\n","    for fold in folds[::-1]:\n","        train_start = fold['train_start']\n","        train_end = fold['train_end']\n","        val_start = fold['val_start']\n","        val_end = fold['val_end']\n","        test_start = fold['test_start']\n","        test_end = fold['test_end']\n","\n","        ax.barh(i, train_end - train_start, left=train_start, height=0.5, color='blue', label='Train')\n","        ax.barh(i, val_end - val_start, left=val_start, height=0.5, color='orange', label='Validation')\n","        ax.barh(i, test_end - test_start, left=test_start, height=0.5, color='red', label='Test')\n","        i += 1\n","\n","    # Set the x-axis limits and labels\n","    ax.set_xlim(folds[0]['train_start'].replace(month=1), folds[-1]['test_end'].replace(month=1))\n","    ax.set_xlabel('Year')\n","\n","    # Add a legend\n","    handles = [plt.Rectangle((0, 0), 1, 1, color='blue'),\n","               plt.Rectangle((0, 0), 1, 1, color='orange'),\n","               plt.Rectangle((0, 0), 1, 1, color='red')]\n","    labels = ['Train', 'Validation', 'Test']\n","    ax.legend(handles, labels, loc='upper right')\n","\n","    # Show the plot\n","    plt.show()\n","    \n","    return None"]},{"cell_type":"markdown","source":["## **normalize**\n","\n","The function normalize aims to take any series of values and return the series as a normalized decimal. It works by taking a series of values and then takes thier sum. Once we have the sum every value in the series divided by total sum to gain the decimal. Since this is done using list comprehension a list is returned. \n"],"metadata":{"id":"e2Me5yFmIMKF"}},{"cell_type":"code","source":["def normalize(values):\n","    \n","    '''\n","    Normalise a list of values such that they all sum up to one (use in variable importance analysis)\n","\n","    Inputs:\n","      > values: list containing values\n","\n","    Outputs:\n","      > normalised_values: list containing normalised values \n","    '''\n","    total = sum(values)\n","    normalized_values = [x / total for x in values]\n","    \n","    return normalized_values"],"metadata":{"id":"DyXDc7Qg8KNp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **get_var_imp_plot**\n","\n","Lastly, get_var_imp_plot is just a plotting function which takes a variaety of labels and values and then plots them in decreasing order using a horizontal bar graph. \n"],"metadata":{"id":"eyf7AA_WIRaE"}},{"cell_type":"code","source":["def get_var_imp_plot(var_imp_df, model): \n","  \n","    '''\n","    Get variable importance bar plot\n","\n","    Inputs:\n","      > var_imp_df: dataframe containing predictors' name and their corresponding variable importance values\n","      > model: name if the model (for labelling) \n","\n","    Outputs:\n","      > Horizontal bar plot showing variable importance (ascending order) \n","    '''\n","    # Sort the variable importance in ascending order\n","    sorted_var_imp = var_imp_df.sort_values('Variable Importance', ascending=True)\n","\n","    # Plot the horizontal bar plot\n","    sorted_var_imp.plot.barh(x='Predictor', y='Variable Importance', legend=False)\n","\n","    # Set the plot title and axis labels\n","    plt.title(f'{model}')\n","    plt.ylabel('Predictor')\n","\n","    # Show the plot\n","    plt.show()"],"metadata":{"id":"M839SbMA8KP-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2Q6lWLFkrMy-"},"source":["## Rolling Window Settings"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mi4dQ3WsrQ2V"},"outputs":[],"source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"executionInfo":{"elapsed":371,"status":"ok","timestamp":1686251846749,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"7_JtbrOlrZXR","outputId":"fda9109c-44ff-4579-f927-0da86b6ce67e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["get_tscv_plot(start_year, end_year, train_size, val_size, test_size, step)"]},{"cell_type":"markdown","source":["\n","## **Check for specific rolling dates**\n"],"metadata":{"id":"Oz9aEUSLSyiX"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":270,"status":"ok","timestamp":1686251854208,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"20cQxWCMrZjZ","outputId":"907bd910-1ed7-426b-f7cf-7c2aae55023f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fold 1:\n","Train end: index=1987-03-01 00:00:00\n","Validation end:  index=2007-03-01 00:00:00\n","Test end:  index=2009-03-01 00:00:00\n","\n","Fold 2:\n","Train end: index=1989-03-01 00:00:00\n","Validation end:  index=2009-03-01 00:00:00\n","Test end:  index=2011-03-01 00:00:00\n","\n","Fold 3:\n","Train end: index=1991-03-01 00:00:00\n","Validation end:  index=2011-03-01 00:00:00\n","Test end:  index=2013-03-01 00:00:00\n","\n","Fold 4:\n","Train end: index=1993-03-01 00:00:00\n","Validation end:  index=2013-03-01 00:00:00\n","Test end:  index=2015-03-01 00:00:00\n","\n","Fold 5:\n","Train end: index=1995-03-01 00:00:00\n","Validation end:  index=2015-03-01 00:00:00\n","Test end:  index=2016-12-01 00:00:00\n","\n"]}],"source":["for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    print(f\"Fold {i+1}:\")\n","    \n","    #train_set = your_data[train_index]\n","    print(f\"Train end: index={train_end}\")\n","    \n","    #val_set = your_data[val_index]\n","    print(f\"Validation end:  index={val_end}\")\n","    \n","    #test_set = your_data[test_index]\n","    print(f\"Test end:  index={test_end}\\n\")"]},{"cell_type":"markdown","source":["# Model Fitting "],"metadata":{"id":"iezpfczfF7LF"}},{"cell_type":"markdown","source":["We elaborate on the work of Gu, Kelly and Xiu (2019) by building up three models that try to predict returns. We first use a simple OLS regression with two sets of features. We then employ a gradient boosted machine model and finally a random forest framework. We then compare the performances with each other and the original study as well.\n","\n","We follow the paper to form a dataset that contains montly stock returns from 1957 to 2016. There are data 94 charateristic features of the stock plus 8 macroeconomic predictors. The whole dataset is of the shape (3739449, 107).\n","\n","We configure our parameters using grid search \n","\n","**Tuning for OLS:**\n",">- f: S → L\n","- x ∈ S\n","- X_all = {x1, x2, ..., xn} as the set of all variables\n","- X_top = {x'_1, x'_2, ..., x'_10} as the set of the 10 most important variables\n","\n",">Model 1\n","  - L_all = *L*(**y**, *h*(X_all))\n","\n",">Model 2 \n","  - L_top = *L*(**y**, *h*(X_top))\n","\n","**Tuning for GBM:**\n",">Optimize F(n, d, l) subject to:\n","\n","\n","> - n ∈ {50, 100, 150, 200}\n","> - d ∈ {1, 3, 5, 9}\n","> - l ∈ {0.01, 0.1, 0.001}\n","\n","**Tuning for RF:**\n","> No tuning due to computational constraints. "],"metadata":{"id":"RUHJ3QRKPHie"}},{"cell_type":"markdown","source":["## **OLS Model - All Features**"],"metadata":{"id":"OLnotWjbcURV"}},{"cell_type":"markdown","source":["In this section we will implement a standard OLS regression with all the features. {Add the R-sqared here and comment on it}. In literature the rationale behind using OLS is to have a baseline prediction model we are trying to beat. As such we have decided to use the OLS as a baseline. We utilized two versions of the OLS, one with all the features and one with only 10 of the features."],"metadata":{"id":"E3zrfynQNUPT"}},{"cell_type":"markdown","source":["- Apply rolling window validation to test model performance\n","- No hyperparameter so we can test the model straightaway"],"metadata":{"id":"Rkn7bvDDcUoD"}},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"],"metadata":{"id":"i4FqMs0Rktbw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Model Testing"],"metadata":{"id":"bKashueKchSF"}},{"cell_type":"code","source":["%%time\n","# Run time: 4 min per model\n","date = df[\"date\"]\n","\n","fold_test = []\n","test_linear_mse = []\n","test_base_mse = []\n","test_R2_oos_linear = []\n","\n","for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    \n","    print(f\"Working with Fold {i+1}...\")\n","    fold_test.append(i+1)\n","    \n","    # Define training set\n","    training = (date <= val_end)\n","    X_train, y_train = X.loc[training].values, y.loc[training].values\n","    \n","    # Define test set\n","    test = (date > val_end) & (date <= test_end)\n","    X_test, y_test = X.loc[test].values, y.loc[test].values\n","    \n","    # Train models using best hyperparameters\n","    ols = LinearRegression()\n","    ols.fit(X_train, y_train)\n","    \n","    # Use trained models to make predictions\n","    pred_ols = ols.predict(X_test)\n","    \n","    # Calculate prediction model MSE\n","    ols_mse = mean_squared_error(pred_ols, y_test)\n","    test_linear_mse.append(ols_mse)\n","    \n","    # Calculate base model MSE\n","    base_mse = np.sum(np.square(y_test)) / len(y_test)\n","    test_base_mse.append(base_mse)\n","\n","    # Calculate R^2 OOS for this fold\n","    R2_oos_ols = 1 - (ols_mse/base_mse)\n","    test_R2_oos_linear.append(R2_oos_ols)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ui-WFyGicojY","executionInfo":{"status":"ok","timestamp":1686177019456,"user_tz":-60,"elapsed":182121,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"c420a326-b7b7-4ad8-8870-a998d489f988"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Working with Fold 1...\n","Working with Fold 2...\n","Working with Fold 3...\n","Working with Fold 4...\n","Working with Fold 5...\n","CPU times: user 22min 18s, sys: 20min 59s, total: 43min 17s\n","Wall time: 3min 1s\n"]}]},{"cell_type":"code","source":["test_linear = pd.DataFrame({'Fold':fold_test, 'MSE_base':test_base_mse, 'MSE_NN2':test_linear_mse, 'R2_OOS_NN2':test_R2_oos_linear})\n","R2_oos_linear = sum(test_R2_oos_linear) / len(test_R2_oos_linear)\n","\n","display(test_linear)\n","print(f\"R2_OOS OLS = {R2_oos_linear}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"LcfW9gRpctoJ","executionInfo":{"status":"ok","timestamp":1686177019456,"user_tz":-60,"elapsed":15,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"49bff6b1-621c-437a-cdca-3a75ea334987"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   Fold  MSE_base   MSE_NN2  R2_OOS_NN2\n","0     1  0.034065  0.039896   -0.171182\n","1     2  0.035054  0.036475   -0.040537\n","2     3  0.018628  0.018913   -0.015346\n","3     4  0.016835  0.016771    0.003823\n","4     5  0.027136  0.027513   -0.013872"],"text/html":["\n","  <div id=\"df-5ed948c7-2d6e-40c9-a9c9-5c4b91f1c738\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fold</th>\n","      <th>MSE_base</th>\n","      <th>MSE_NN2</th>\n","      <th>R2_OOS_NN2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.034065</td>\n","      <td>0.039896</td>\n","      <td>-0.171182</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.035054</td>\n","      <td>0.036475</td>\n","      <td>-0.040537</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.018628</td>\n","      <td>0.018913</td>\n","      <td>-0.015346</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.016835</td>\n","      <td>0.016771</td>\n","      <td>0.003823</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.027136</td>\n","      <td>0.027513</td>\n","      <td>-0.013872</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ed948c7-2d6e-40c9-a9c9-5c4b91f1c738')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5ed948c7-2d6e-40c9-a9c9-5c4b91f1c738 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5ed948c7-2d6e-40c9-a9c9-5c4b91f1c738');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["R2_OOS OLS = -0.047422922398168366\n"]}]},{"cell_type":"markdown","source":["Get top 10 most important variables:"],"metadata":{"id":"ttLCWnl29w2d"}},{"cell_type":"code","source":["%%time\n","# Get R2_OOS for the base model (always predicting excess return = 0)\n","mse_base = np.sum(np.square(y_test)) / len(y_test)\n","\n","drop_R2_oos_ols = []\n","\n","for i in range(X_test.shape[1]):\n","\n","  # Set a predictor of interest to zero\n","  X_test_zero = X_test.copy()\n","  X_test_zero[:,i] = 0\n","  \n","  # Calculate the new R2_OOS\n","  mse_new = mean_squared_error(ols.predict(X_test_zero), y_test)\n","  R2_oos_new = 1 - (mse_new/mse_base)\n","  \n","  # Calculate the drop in R2_OOS\n","  drop_R2_oos = R2_oos_linear - R2_oos_new\n","  drop_R2_oos_ols.append(drop_R2_oos)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5HGflXGD90q0","executionInfo":{"status":"ok","timestamp":1686177059999,"user_tz":-60,"elapsed":7491,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"ed36e571-bb10-4aff-a4e3-e899db431795"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 46 s, sys: 3min 58s, total: 4min 44s\n","Wall time: 7.29 s\n"]}]},{"cell_type":"code","source":["# Normalised the values such that they sum to one\n","var_imp_ols = normalize(drop_R2_oos_ols)\n","\n","# Create a dataframe containing predictors and their corresponding variable importance value\n","var_imp_df = pd.DataFrame({'Predictor':X.columns, 'R2_OOS Drop':drop_R2_oos_ols, 'Variable Importance':var_imp_ols})\n","\n","# Remove macro variables rows (we only want to compare the importance of stock characteristics)\n","to_exclude = '|'.join(macro_pred)\n","var_imp_df = var_imp_df[~var_imp_df['Predictor'].str.contains(to_exclude)].reset_index(drop=True)\n","\n","# Get the top 10 important variables\n","var_imp_df = var_imp_df.sort_values('Variable Importance', ascending=False)[:10]\n","\n","display(var_imp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"gG60834s-SV1","executionInfo":{"status":"ok","timestamp":1686177066639,"user_tz":-60,"elapsed":209,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"bbb54957-cfa1-4bdc-9897-f36804eb0e5d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["    Predictor  R2_OOS Drop  Variable Importance\n","7       mom1m    -0.033952             0.010963\n","0       mvel1    -0.033851             0.010931\n","5     idiovol    -0.033841             0.010928\n","57     rd_mve    -0.033828             0.010923\n","44     orgcap    -0.033779             0.010907\n","14        acc    -0.033745             0.010896\n","90  zerotrade    -0.033718             0.010888\n","16        agr    -0.033702             0.010883\n","32         dy    -0.033700             0.010882\n","78     roavol    -0.033679             0.010875"],"text/html":["\n","  <div id=\"df-5de3f9e1-9a6c-4287-8d42-896f0d80b74e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Predictor</th>\n","      <th>R2_OOS Drop</th>\n","      <th>Variable Importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>mom1m</td>\n","      <td>-0.033952</td>\n","      <td>0.010963</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>mvel1</td>\n","      <td>-0.033851</td>\n","      <td>0.010931</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>idiovol</td>\n","      <td>-0.033841</td>\n","      <td>0.010928</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>rd_mve</td>\n","      <td>-0.033828</td>\n","      <td>0.010923</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>orgcap</td>\n","      <td>-0.033779</td>\n","      <td>0.010907</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>acc</td>\n","      <td>-0.033745</td>\n","      <td>0.010896</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>zerotrade</td>\n","      <td>-0.033718</td>\n","      <td>0.010888</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>agr</td>\n","      <td>-0.033702</td>\n","      <td>0.010883</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>dy</td>\n","      <td>-0.033700</td>\n","      <td>0.010882</td>\n","    </tr>\n","    <tr>\n","      <th>78</th>\n","      <td>roavol</td>\n","      <td>-0.033679</td>\n","      <td>0.010875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5de3f9e1-9a6c-4287-8d42-896f0d80b74e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5de3f9e1-9a6c-4287-8d42-896f0d80b74e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5de3f9e1-9a6c-4287-8d42-896f0d80b74e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["get_var_imp_plot(var_imp_df, 'OLS')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"b42aRtMV-Z0y","executionInfo":{"status":"ok","timestamp":1686177073110,"user_tz":-60,"elapsed":574,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"91e7e8ac-4cbb-4834-e6f5-85c703795b1d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## **OLS Model - 10 Features**"],"metadata":{"id":"S906KMvmZSVx"}},{"cell_type":"markdown","source":["In this section we will implement a standard OLS regression with 10 of the features, which were the top 10 most important features in the ANN model. *{Add the R-sqared here and comment on it}*. The OLS model with less features performed better than the one with more which suggests that a lot of the fetaures are just noise when predicting using a linear estimator / model. {Comment on the comparison of the  p values as well to see if they are significantly different}"],"metadata":{"id":"cpAwhIToBK6M"}},{"cell_type":"markdown","source":["- Apply rolling window validation to test model performance\n","- No hyperparameter so we can test the model straightaway"],"metadata":{"id":"g5llWUEuZ-xH"}},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"],"metadata":{"id":"24J0xBxOaJdC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Model Testing"],"metadata":{"id":"my5kVPhjcjA9"}},{"cell_type":"markdown","source":["Run with top 10 important variables (obtained from NN3):"],"metadata":{"id":"q-MG4SeKjDHp"}},{"cell_type":"code","source":["X_imp = df[['maxret', 'std_turn', 'ill', 'lev', 'chcsho', 'operprof', 'cfp_ia', 'turn', 'sp', 'orgcap']]"],"metadata":{"id":"hZosLQgkjDQp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%time\n","\n","date = df[\"date\"]\n","\n","fold_test = []\n","test_linear_mse = []\n","test_base_mse = []\n","test_R2_oos_linear = []\n","\n","for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    \n","    print(f\"Working with Fold {i+1}...\")\n","    fold_test.append(i+1)\n","    \n","    # Define training set\n","    training = (date <= val_end)\n","    X_train, y_train = X_imp.loc[training].values, y.loc[training].values\n","    \n","    # Define test set\n","    test = (date > val_end) & (date <= test_end)\n","    X_test, y_test = X_imp.loc[test].values, y.loc[test].values\n","    \n","    # Train models using best hyperparameters\n","    ols = LinearRegression()\n","    ols.fit(X_train, y_train)\n","    \n","    # Use trained models to make predictions\n","    pred_ols = ols.predict(X_test)\n","    \n","    # Calculate prediction model MSE\n","    ols_mse = mean_squared_error(pred_ols, y_test)\n","    test_linear_mse.append(ols_mse)\n","    \n","    # Calculate base model MSE\n","    base_mse = np.sum(np.square(y_test)) / len(y_test)\n","    test_base_mse.append(base_mse)\n","\n","    # Calculate R^2 OOS for this fold\n","    R2_oos_ols = 1 - (ols_mse/base_mse)\n","    test_R2_oos_linear.append(R2_oos_ols)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"872g05zQkWnc","executionInfo":{"status":"ok","timestamp":1686170239203,"user_tz":-60,"elapsed":11572,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"b7b325b1-f0a9-44ee-8fec-d33cab4d8b73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Working with Fold 1...\n","Working with Fold 2...\n","Working with Fold 3...\n","Working with Fold 4...\n","Working with Fold 5...\n","CPU times: user 22.7 s, sys: 1min 32s, total: 1min 55s\n","Wall time: 11.4 s\n"]}]},{"cell_type":"code","source":["test_linear = pd.DataFrame({'Fold':fold_test, 'MSE_base':test_base_mse, 'MSE_NN2':test_linear_mse, 'R2_OOS_NN2':test_R2_oos_linear})\n","R2_oos_linear = sum(test_R2_oos_linear) / len(test_R2_oos_linear)\n","\n","display(test_linear)\n","print(f\"R2_OOS OLS = {R2_oos_linear}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"OEarbdtqk94u","executionInfo":{"status":"ok","timestamp":1686170263822,"user_tz":-60,"elapsed":217,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"bf398c50-1629-476c-99ce-8ba5c19c4ac7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   Fold  MSE_base   MSE_NN2  R2_OOS_NN2\n","0     1  0.034065  0.034501   -0.012805\n","1     2  0.035054  0.034639    0.011822\n","2     3  0.018628  0.018590    0.001990\n","3     4  0.016835  0.016723    0.006686\n","4     5  0.027136  0.027142   -0.000223"],"text/html":["\n","  <div id=\"df-f1cde5c2-3283-4501-8f13-4938ff63d5c2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fold</th>\n","      <th>MSE_base</th>\n","      <th>MSE_NN2</th>\n","      <th>R2_OOS_NN2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.034065</td>\n","      <td>0.034501</td>\n","      <td>-0.012805</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.035054</td>\n","      <td>0.034639</td>\n","      <td>0.011822</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.018628</td>\n","      <td>0.018590</td>\n","      <td>0.001990</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.016835</td>\n","      <td>0.016723</td>\n","      <td>0.006686</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.027136</td>\n","      <td>0.027142</td>\n","      <td>-0.000223</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1cde5c2-3283-4501-8f13-4938ff63d5c2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f1cde5c2-3283-4501-8f13-4938ff63d5c2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f1cde5c2-3283-4501-8f13-4938ff63d5c2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["R2_OOS OLS = 0.0014937331144858179\n"]}]},{"cell_type":"markdown","metadata":{"id":"qxYWAefErhce"},"source":["## **GBM Model**"]},{"cell_type":"markdown","source":["### **GBM**\n","In this section we employ a more advanced ML technique and use XG Boost to predict the return. XG boost is a Gradient Boosting Model that is a ensable learning method. This means that it addively creates weak learners and then adds them together to create a model with greate predictive accuracy. Ensamble methods are good for learning complex non-linear relationship like the one which are found to be good for returns prediction.\n","\n","We use grid search and cross validation to find the optimal setup for our model. We use from 50 to 200 tree to train our model with varying depths. For financial tasks and return prediction the depth of trees selected should be between 1-2 according to literature.\n"],"metadata":{"id":"QNGVAIdkN1Iy"}},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 35        # Number of years in the training set\n","val_size = 23          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"],"metadata":{"id":"bCmLJNyCDnWO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    print(f\"Fold {i+1}:\")\n","    \n","    #train_set = your_data[train_index]\n","    print(f\"Train end: index={train_end}\")\n","    \n","    #val_set = your_data[val_index]\n","    print(f\"Validation end:  index={val_end}\")\n","    \n","    #test_set = your_data[test_index]\n","    print(f\"Test end:  index={test_end}\\n\")"],"metadata":{"id":"RJQAsPSmDtMN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gN4ZXCvR6MsI"},"source":["### Hyperparameter Tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JlZeuhQ2rueg"},"outputs":[],"source":["# Define tuning parameters for GBM:\n","n_estimator_grid = [10, 25, 50]\n","max_depth_grid = [1, 2]\n","learning_rate_grid = [0.01, 0.05, 0.1]"]},{"cell_type":"code","source":["%%time\n","\n","date = df[\"date\"]\n","\n","n_estimator = []     # Collect n_estimator used\n","learning_rate = []   # Collect learning_rate used\n","max_depth = []       # Collect max_dapth used\n","\n","val_mse_gbm = []   # Collect validation MSE of the GBM model\n","\n","# Define training set\n","training = (date <= '1992-03')\n","X_train, y_train = X.loc[training].values, y.loc[training].values\n","\n","# Define validation set\n","validation = (date > '1992-03') & (date <= '2015-03') \n","X_val, y_val = X.loc[validation].values, y.loc[validation].values\n","\n","for n_es in n_estimator_grid:\n","    print(f'working on n_estimator: {n_es}')\n","    \n","    for md in max_depth_grid:\n","        print(f'working on max_depth: {md}')\n","        \n","        for lr in learning_rate_grid:\n","          print(f'working on learning_rate: {lr}')\n","          n_estimator.append(n_es)\n","          max_depth.append(md)\n","          learning_rate.append(lr)\n","\n","          # Instantiate the classifier, with specific hyperparameters\n","          gbm = GradientBoostingRegressor(n_estimators=n_es, max_depth=md, learning_rate=lr)\n","\n","          # Train the GBM model\n","          gbm.fit(X_train, y_train)\n","\n","          # Validate the model\n","          y_pred = gbm.predict(X_val)\n","          mse_gbm = mean_squared_error(y_val, y_pred)\n","      \n","          val_mse_gbm.append(mse_gbm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_f31ZfhU3bnA","executionInfo":{"status":"ok","timestamp":1686156061750,"user_tz":-60,"elapsed":5578438,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"b7284342-5cf5-4e8d-9b52-1f06d1acb8a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["working on n_estimator: 10\n","working on max_depth: 1\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","working on max_depth: 2\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","working on n_estimator: 25\n","working on max_depth: 1\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","working on max_depth: 2\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","working on n_estimator: 50\n","working on max_depth: 1\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","working on max_depth: 2\n","working on learning_rate: 0.01\n","working on learning_rate: 0.05\n","working on learning_rate: 0.1\n","CPU times: user 3h 45min 48s, sys: 10.6 s, total: 3h 45min 59s\n","Wall time: 3h 45min 25s\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":243,"status":"ok","timestamp":1686157245925,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"ZiQiwk-2ruoD","outputId":"3bbdd225-21e3-409f-ffe6-b7a6a6155c35"},"outputs":[{"output_type":"display_data","data":{"text/plain":["    n_estimator  max_depth  learning_rate  Validation MSE\n","0            10          1           0.01        0.033249\n","1            10          1           0.05        0.035722\n","2            10          1           0.10        0.036969\n","3            10          2           0.01        0.033176\n","4            10          2           0.05        0.035070\n","5            10          2           0.10        0.035064\n","6            25          1           0.01        0.034210\n","7            25          1           0.05        0.036558\n","8            25          1           0.10        0.037549\n","9            25          2           0.01        0.033420\n","10           25          2           0.05        0.034492\n","11           25          2           0.10        0.038538\n","12           50          1           0.01        0.035442\n","13           50          1           0.05        0.037877\n","14           50          1           0.10        0.039290\n","15           50          2           0.01        0.034168\n","16           50          2           0.05        0.036495\n","17           50          2           0.10        0.038268"],"text/html":["\n","  <div id=\"df-5a4116e2-c180-4df6-ae76-def6f0e1bcfe\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>n_estimator</th>\n","      <th>max_depth</th>\n","      <th>learning_rate</th>\n","      <th>Validation MSE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0.01</td>\n","      <td>0.033249</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0.05</td>\n","      <td>0.035722</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0.10</td>\n","      <td>0.036969</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>0.01</td>\n","      <td>0.033176</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>0.05</td>\n","      <td>0.035070</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>0.10</td>\n","      <td>0.035064</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>0.01</td>\n","      <td>0.034210</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>0.05</td>\n","      <td>0.036558</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>25</td>\n","      <td>1</td>\n","      <td>0.10</td>\n","      <td>0.037549</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>0.01</td>\n","      <td>0.033420</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>0.05</td>\n","      <td>0.034492</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>25</td>\n","      <td>2</td>\n","      <td>0.10</td>\n","      <td>0.038538</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>0.01</td>\n","      <td>0.035442</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>0.05</td>\n","      <td>0.037877</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>0.10</td>\n","      <td>0.039290</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>50</td>\n","      <td>2</td>\n","      <td>0.01</td>\n","      <td>0.034168</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>50</td>\n","      <td>2</td>\n","      <td>0.05</td>\n","      <td>0.036495</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>50</td>\n","      <td>2</td>\n","      <td>0.10</td>\n","      <td>0.038268</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a4116e2-c180-4df6-ae76-def6f0e1bcfe')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5a4116e2-c180-4df6-ae76-def6f0e1bcfe button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5a4116e2-c180-4df6-ae76-def6f0e1bcfe');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}],"source":["tuning_gbm = pd.DataFrame({'n_estimator':n_estimator, 'max_depth':max_depth, 'learning_rate':learning_rate, 'Validation MSE':val_mse_gbm})\n","display(tuning_gbm)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"elapsed":204,"status":"ok","timestamp":1686157601376,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"},"user_tz":-60},"id":"vH-V50Xc3yDa","outputId":"6191c1ae-86cf-4e2e-e368-23d0bc8da1f4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best hyperparameters:\n"]},{"output_type":"display_data","data":{"text/plain":["n_estimator       10.000000\n","max_depth          2.000000\n","learning_rate      0.010000\n","Validation MSE     0.033176\n","Name: 3, dtype: float64"]},"metadata":{}}],"source":["print(\"Best hyperparameters for GBM:\") \n","display(tuning_gbm.loc[tuning_gbm['Validation MSE'].idxmin()])"]},{"cell_type":"markdown","metadata":{"id":"oZhwRjPb6Fct"},"source":["### Model Testing - using best set of hyperparameters"]},{"cell_type":"markdown","source":["Due to time constraints, we use only one fold (no rolling window), where:\n","- Training set: 1957-03 to 2015-03\n","- Test set: 2015-03 to 2016-12"],"metadata":{"id":"7H9KDpG0bZDm"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"S3XnU_-K6ZX9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686159106135,"user_tz":-60,"elapsed":986134,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"5e5ab6e8-c41c-4c4a-e0a6-6b58d3af4b88"},"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 16min 23s, sys: 5.47 s, total: 16min 28s\n","Wall time: 16min 23s\n"]}],"source":["%%time\n","\n","date = df[\"date\"]\n","\n","fold_test = []\n","test_gbm_mse = []\n","test_base_mse = []\n","test_R2_oos_gbm = []\n","\n","# Define training set\n","training = (date <= '2015-03')\n","X_train, y_train = X.loc[training].values, y.loc[training].values\n","\n","# Define test set\n","test = (date > '2015-03') & (date <= '2016-12')\n","X_test, y_test = X.loc[test].values, y.loc[test].values\n","\n","# Train models using best hyperparameters\n","gbm = GradientBoostingRegressor(n_estimators=10, max_depth=2, learning_rate=0.01)\n","gbm.fit(X_train, y_train)\n","\n","# Use trained models to make predictions\n","pred_gbm = gbm.predict(X_test)\n","\n","# Calculate prediction model MSE\n","gbm_mse = mean_squared_error(pred_gbm, y_test)\n","\n","# Calculate base model MSE\n","base_mse = np.sum(np.square(y_test)) / len(y_test)\n","\n","# Calculate R^2 OOS for this fold\n","R2_oos_gbm = 1 - (gbm_mse/base_mse)"]},{"cell_type":"code","source":["print(f\"R2_OOS GBM = {R2_oos_gbm}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B70-q2Hj2nzr","executionInfo":{"status":"ok","timestamp":1686159107383,"user_tz":-60,"elapsed":5,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"56b3976d-45d1-42c9-803c-2a4ebac01917"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2_OOS GBM = -0.00022030728192379279\n"]}]},{"cell_type":"markdown","source":["### Model Testing - Using more approapriate hyperparameters"],"metadata":{"id":"DZVThpXqao77"}},{"cell_type":"markdown","source":["**Try n_estimators=100, max_depth=2 and learning_rate=0.01 instead**\n","\n","Due to time constraints, we use only one fold (no rolling window), where:\n","- Training set: 1957-03 to 2015-03\n","- Test set: 2015-03 to 2016-12"],"metadata":{"id":"-yVDTHkN6_gf"}},{"cell_type":"code","source":["%%time\n","\n","date = df[\"date\"]\n","\n","fold_test = []\n","test_gbm_mse = []\n","test_base_mse = []\n","test_R2_oos_gbm = []\n","\n","# Define training set\n","training = (date <= '2015-03')\n","X_train, y_train = X.loc[training].values, y.loc[training].values\n","\n","# Define test set\n","test = (date > '2015-03') & (date <= '2016-12')\n","X_test, y_test = X.loc[test].values, y.loc[test].values\n","\n","# Train models using best hyperparameters\n","gbm = GradientBoostingRegressor(n_estimators=100, max_depth=2, learning_rate=0.01)\n","gbm.fit(X_train, y_train)\n","\n","# Use trained models to make predictions\n","pred_gbm = gbm.predict(X_test)\n","\n","# Calculate prediction model MSE\n","gbm_mse = mean_squared_error(pred_gbm, y_test)\n","\n","# Calculate base model MSE\n","base_mse = np.sum(np.square(y_test)) / len(y_test)\n","\n","# Calculate R^2 OOS for this fold\n","R2_oos_gbm = 1 - (gbm_mse/base_mse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zEWlpFpB2_EF","executionInfo":{"status":"ok","timestamp":1686169113684,"user_tz":-60,"elapsed":4862734,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"96f6d716-be2d-41e1-f1ef-2958c33ef6e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 2h 44min 24s, sys: 8.2 s, total: 2h 44min 32s\n","Wall time: 2h 43min 59s\n"]}]},{"cell_type":"code","source":["print(f\"R2_OOS GBM = {R2_oos_gbm}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-4YhP0bt7LCA","executionInfo":{"status":"ok","timestamp":1686169272517,"user_tz":-60,"elapsed":192,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"6a544eb3-a02c-4bef-e69e-db7084ccab43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2_OOS GBM = -0.0006588379890291041\n"]}]},{"cell_type":"markdown","source":["Get top 10 variable importance:"],"metadata":{"id":"M6bRLX4IIpzR"}},{"cell_type":"code","source":["%%time\n","# Get R2_OOS for the base model (always predicting excess return = 0)\n","mse_base = np.sum(np.square(y_test)) / len(y_test)\n","\n","drop_R2_oos_gbm = []\n","\n","for i in range(X_test.shape[1]):\n","\n","  # Set a predictor of interest to zero\n","  X_test_zero = X_test.copy()\n","  X_test_zero[:,i] = 0\n","  \n","  # Calculate the new R2_OOS\n","  mse_new = mean_squared_error(gbm.predict(X_test_zero), y_test)\n","  R2_oos_new = 1 - (mse_new/mse_base)\n","  \n","  # Calculate the drop in R2_OOS\n","  drop_R2_oos = R2_oos_gbm - R2_oos_new\n","  drop_R2_oos_gbm.append(drop_R2_oos)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RXEWMEyz8rZ5","executionInfo":{"status":"ok","timestamp":1686179773138,"user_tz":-60,"elapsed":23025,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"79a4bc48-307e-46c7-d99c-3330d31c8ee0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 20.7 s, sys: 2.34 s, total: 23 s\n","Wall time: 22.8 s\n"]}]},{"cell_type":"code","source":["# Normalised the values such that they sum to one\n","var_imp_gbm = normalize(drop_R2_oos_gbm)\n","\n","# Create a dataframe containing predictors and their corresponding variable importance value\n","var_imp_df = pd.DataFrame({'Predictor':X.columns, 'R2_OOS Drop':drop_R2_oos_gbm, 'Variable Importance':var_imp_gbm})\n","\n","# Remove macro variables rows (we only want to compare the importance of stock characteristics)\n","to_exclude = '|'.join(macro_pred)\n","var_imp_df = var_imp_df[~var_imp_df['Predictor'].str.contains(to_exclude)].reset_index(drop=True)\n","\n","# Get the top 10 important variables\n","var_imp_df = var_imp_df.sort_values('Variable Importance', ascending=False)[:10]\n","\n","display(var_imp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"nNIaSaxlJR_d","executionInfo":{"status":"ok","timestamp":1686179850992,"user_tz":-60,"elapsed":234,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"913506d5-764b-4a12-d81e-91bdf2fd6229"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["     Predictor  R2_OOS Drop  Variable Importance\n","0        mvel1     0.000155             0.184593\n","7        mom1m     0.000112             0.133396\n","57      rd_mve     0.000000             0.000000\n","66         sgr     0.000000             0.000000\n","65  securedind     0.000000             0.000000\n","64     secured     0.000000             0.000000\n","63     salerec     0.000000             0.000000\n","62     saleinv     0.000000             0.000000\n","61    salecash     0.000000             0.000000\n","60        roic     0.000000             0.000000"],"text/html":["\n","  <div id=\"df-32032168-f4c0-4479-913f-365e48a9e348\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Predictor</th>\n","      <th>R2_OOS Drop</th>\n","      <th>Variable Importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>mvel1</td>\n","      <td>0.000155</td>\n","      <td>0.184593</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>mom1m</td>\n","      <td>0.000112</td>\n","      <td>0.133396</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>rd_mve</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>sgr</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>securedind</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>secured</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>salerec</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>saleinv</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>salecash</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>roic</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-32032168-f4c0-4479-913f-365e48a9e348')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-32032168-f4c0-4479-913f-365e48a9e348 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-32032168-f4c0-4479-913f-365e48a9e348');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["get_var_imp_plot(var_imp_df, 'GBM')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"7BJ2mZcFJXdO","executionInfo":{"status":"ok","timestamp":1686179859572,"user_tz":-60,"elapsed":267,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"f6acb27a-91c2-4e75-dc0b-90fc81957e79"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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6tVLvr6+8vPzU9euXZWenu7Q54MPPlDz5s3l6uqqwMBAjRw50r7trbfeUnh4uDw8PBQUFKQnnnhCubm59u2//PKLHnroId1yyy3y8PBQ8+bNtXLlSofxt23bprvuukvu7u669957tWfPnut/kQAAQLVg2dCWmZmpmJgYDRo0SCkpKYqPj1f37t1ljFFOTo769++v7777Tt9//71CQ0PVpUsX5eTkFDvWxYsXFR0dLS8vL23cuFEJCQny9PRUp06dlJ+fL0maNWuWRowYoccff1y7du3SF198ocaNG9vHcHJy0vTp0/Xjjz9qwYIFWrdunZ555hn79hEjRigvL08bNmzQrl279Nprr8nT09Ohjueee07Tpk1TUlKSatSooUGDBl31NcjLy1N2drbDAgAAqiljUdu2bTOSTHp6+jX7FhQUGC8vL/Pll1/a2ySZzz//3BhjzMKFC03Tpk1NYWGhfXteXp5xc3Mzq1atMsYYU79+ffPcc8+VuL7PPvvM+Pv729fDw8PNpEmTiu27fv16I8l888039rZ///vfRpI5f/78FY8RFxdnJBVZsrKySlwnAACoXFlZWSV6/7bslbaIiAi1b99e4eHh6tmzp+bMmaPTp09Lko4ePaqhQ4cqNDRUPj4+8vb2Vm5urg4ePFjsWDt37tT+/fvl5eUlT09PeXp6ys/PTxcuXFBqaqqOHTumw4cPq3379les55tvvlH79u116623ysvLS3379tXJkyd17tw5SdLo0aP18ssvKzIyUnFxcfrhhx+KjNGiRQv734GBgZKkY8eOXfGYEyZMUFZWln3JyMi49gsHAAAsybKhzdnZWWvWrNHXX3+tO+64QzNmzFDTpk2Vlpam/v37Kzk5We+++642bdqk5ORk+fv72291/lFubq5at26t5ORkh2Xv3r3q06eP3NzcrlpLenq6/vrXv6pFixZaunSptm3bpn/+85+SZD/mkCFDdODAAfXt21e7du3SXXfdpRkzZjiMU7NmTfvfNptNklRYWHjF47q6usrb29thAQAA1ZNlQ5v0W7CJjIzU5MmTtWPHDrm4uOjzzz9XQkKCRo8erS5dutgfHDhx4sQVx2nVqpX27dunOnXqqHHjxg6Lj4+PvLy8FBISorVr1xa7/7Zt21RYWKhp06bpz3/+s5o0aaLDhw8X6RcUFKRhw4Zp2bJleuqppzRn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0M6dO/XMM8+osLCwVDUsWLBALi4uSkhI0OzZs3XmzBndf//9atmypZKSkvSf//xHR48eVa9evez7jBs3Tt9++61WrFih1atXKz4+Xtu3b7/qcfLy8pSdne2wAACA6qlGZRdQ3jIzM3Xp0iV1795dwcHBkqTw8HBJUlxcnKZNm6bu3btLkho2bKiffvpJ7733nvr376/Fixfr+PHj2rp1q/z8/CRJjRs3LnUNoaGhev311+3rL7/8slq2bKkpU6bY2z744AMFBQVp7969ql+/vubOnat//etfat++vaTfgt9tt9121eNMnTpVkydPLnV9AADAeqpdaIuIiFD79u0VHh6u6OhodezYUT169JCLi4tSU1M1ePBgDR061N7/0qVL8vHxkSQlJyerZcuW9sBWVq1bt3ZY37lzp9avXy9PT88ifVNTU3X+/Hnl5+erTZs29nY/Pz81bdr0qseZMGGCxo4da1/Pzs5WUFDQddUOAACqpmoX2pydnbVmzRpt2rRJq1ev1owZM/Tcc8/pyy+/lCTNmTPHIRxd3keS3Nzcrjq2k5OTjDEObRcvXizSz8PDw2E9NzdXDz30kF577bUifQMDA7V///5rT6wYrq6ucnV1LdO+AADAWqrdZ9okyWazKTIyUpMnT9aOHTvsny+rX7++Dhw4oMaNGzssDRs2lCS1aNFCycnJOnXqVLHj1q5dW5mZmQ5tycnJ16ynVatW+vHHHxUSElLk2B4eHmrUqJFq1qxpf+BBkk6fPq29e/eW/UUAAADVSrULbYmJiZoyZYqSkpJ08OBBLVu2TMePH1dYWJgmT56sqVOnavr06dq7d6927dqlefPm6a233pIkxcTEqF69eurWrZsSEhJ04MABLV26VJs3b5Yk3X///UpKStKHH36offv2KS4uTrt3775mTSNGjNCpU6cUExOjrVu3KjU1VatWrdLAgQNVUFAgT09PDR48WOPGjdO6deu0e/duDRgwQE5O1e70AACAMqp2t0e9vb21YcMGvfPOO8rOzlZwcLCmTZumzp07S5Lc3d31xhtvaNy4cfLw8FB4eLj9VwdcXFy0evVqPfXUU+rSpYsuXbqkO+64Q//85z8lSdHR0Xr++ef1zDPP6MKFCxo0aJD69eunXbt2XbWm+vXrKyEhQePHj1fHjh2Vl5en4OBgderUyR7M3njjDfttVC8vLz311FPKysqquBcKAABYis388UNasKzs7Gz5+PgoKytL3t7elV0OAAAogZK+f3P/DQAAwAIIbQAAABZAaAMAALAAQhsAAIAFENoAAAAsgNAGAABgAYQ2AAAACyC0AQAAWAChDQAAwAIIbQAAABZAaAMAALAAQhsAAIAFENoAAAAsgNAGAABgAYQ2AAAACyC0AQAAWAChDQAAwAIIbQAAABZAaAMAALAAQhsAAIAFENoAAAAsgNAGAABgAYQ2AAAACyC0AQAAWAChDQAAwAIIbeWgXbt2GjNmjH09JCRE77zzznWNGR8fL5vNpjNnzlzXOAAAoHqoUdkFVEdbt26Vh4dHZZcBAACqEULb/5efny8XF5dyGat27drlMg4AAMBllXp7dMmSJQoPD5ebm5v8/f3VoUMHnT17VpL0/vvvKywsTLVq1VKzZs00c+ZMh30PHTqkmJgY+fn5ycPDQ3fddZcSExMlSQMGDFC3bt0c+o8ZM0bt2rWzr7dr104jR47UmDFjFBAQoOjoaEnS7t271blzZ3l6eqpu3brq27evTpw4Yd/v7Nmz6tevnzw9PRUYGKhp06YVmdcfb4/abDa9//77euSRR+Tu7q7Q0FB98cUXDvusXLlSTZo0kZubm/7yl78oPT29tC8nAACoxiottGVmZiomJkaDBg1SSkqK4uPj1b17dxljtGjRIr3wwgt65ZVXlJKSoilTpuj555/XggULJEm5ubmKiorSr7/+qi+++EI7d+7UM888o8LCwlLVsGDBArm4uCghIUGzZ8/WmTNndP/996tly5ZKSkrSf/7zHx09elS9evWy7zNu3Dh9++23WrFihVavXq34+Hht3779mseaPHmyevXqpR9++EFdunRRbGysTp06JUnKyMhQ9+7d9dBDDyk5OVlDhgzRs88+e80x8/LylJ2d7bAAAIBqylSSbdu2GUkmPT29yLZGjRqZxYsXO7S99NJLpm3btsYYY9577z3j5eVlTp48WezY/fv3N127dnVoe/LJJ01UVJR9PSoqyrRs2bLIMTp27OjQlpGRYSSZPXv2mJycHOPi4mI+/fRT+/aTJ08aNzc38+STT9rbgoODzdtvv21fl2QmTpxoX8/NzTWSzNdff22MMWbChAnmjjvucDju+PHjjSRz+vTpYudojDFxcXFGUpElKyvrivsAAICqJSsrq0Tv35X2mbaI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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"BG2UinFtJsoc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Random Forest Model**"],"metadata":{"id":"wDY3VII3hdMP"}},{"cell_type":"markdown","source":["### **Random Forest**\n","\n","RandomForest is another ensable machine learning algorithm. It also combines the performance from multiple models to be able to make non-linear predictions using large amounts of data. There are 4 main steps to RF. First is Bootstraping where, the sample randomly split for every tree and re-sampled. This is done to reduce the variance of the model. We then remove features for every tree to create more diversity between trees. We then build our decision trees. Each tree gives a prediction and then the average/most common prediction is returned. \n","\n","We chose to use the random forest due it ability to handle large amounts of data and dimensionality. They also have a less bias compared to things like decision trees which tend to massively overfit. "],"metadata":{"id":"6PbUAV5xySFV"}},{"cell_type":"markdown","source":["### Hyperparameter Tuning"],"metadata":{"id":"PHw3WlKFhdSx"}},{"cell_type":"markdown","source":["We didn't do tuning for this model due to computational constraints. "],"metadata":{"id":"LnqhrKV6WpfN"}},{"cell_type":"code","source":["# Define tuning parameters for Random Forest:\n","n_estimators_grid = [50, 100, 200]\n","max_depth_grid = [2, 4, 6]\n","max_features_grid = [5, 10]"],"metadata":{"id":"UmEI__-rhkwR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%time\n","\n","date = df[\"date\"]\n","\n","n_estimators = []     # Collect n_estimator used\n","max_depth = []        # Collect learning_rate used\n","max_features = []     # Collect max_dapth used\n","\n","val_mse_rf = []   # Collect validation MSE of the GBM model\n","    \n","# Define training set\n","training = (date <= '1992-03')\n","X_train, y_train = X.loc[training].values, y.loc[training].values\n","\n","# Define validation set\n","validation = (date > '1992-03') & (date <= '2015-03') \n","X_val, y_val = X.loc[validation].values, y.loc[validation].values\n","\n","for n_est in n_estimators_grid:\n","    print(f'working on n_estimator: {n_est}')\n","\n","    for md in max_depth_grid:\n","        print(f'working on max_depth: {md}')\n","\n","        for mf in max_features_grid:\n","          print(f'working on max_features: {mf}')\n","\n","          n_estimators.append(n_est)\n","          max_depth.append(md)\n","          max_features.append(mf)\n","\n","          # Instantiate the Random Forest regressor, with specific hyperparameters\n","          rf = RandomForestRegressor(n_estimators=n_est, max_depth=md, max_features=mf)\n","\n","          # Train the GBM model\n","          rf.fit(X_train, y_train)\n","\n","          # Validate the model\n","          y_pred = rf.predict(X_val)\n","          mse_rf = mean_squared_error(y_val, y_pred)\n","      \n","          val_mse_rf.append(mse_rf)\n"],"metadata":{"id":"_7kBJ9lqi1p5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tuning_rf = pd.DataFrame({'n_estimators':n_estimators, 'max_depth':max_depth, 'max_features':max_features, 'Validation MSE':val_mse_rf})\n","display(tuning_rf)"],"metadata":{"id":"ZOqfY45mkBhU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Best hyperparameters for Random Forest:\") \n","display(tuning_gbm.loc[tuning_gbm['Validation MSE'].idxmin()])"],"metadata":{"id":"Mv25j514kOL8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Model Testing"],"metadata":{"id":"yZ2D7pXhsblR"}},{"cell_type":"markdown","source":["**In this case, we just use n_estimators=300, max_depth=3 and max_features=10**\n","\n","Due to time constraints, we use only one fold (no rolling window), where:\n","- Training set: 1957-03 to 2015-03\n","- Test set: 2015-03 to 2016-12"],"metadata":{"id":"A_7LPsVEsgVO"}},{"cell_type":"code","source":["%%time\n","\n","date = df[\"date\"]\n","\n","# Define training set\n","training = (date <= '2015-03')\n","X_train, y_train = X.loc[training].values, y.loc[training].values\n","\n","# Define test set\n","test = (date > '2015-03') & (date <= '2016-12')\n","X_test, y_test = X.loc[test].values, y.loc[test].values\n","\n","# Train models using best hyperparameters\n","rf = RandomForestRegressor(n_estimators=300, max_depth=3, max_features=10)\n","rf.fit(X_train, y_train)\n","\n","# Use trained models to make predictions\n","pred_rf = rf.predict(X_test)\n","\n","# Calculate prediction model MSE\n","rf_mse = mean_squared_error(pred_rf, y_test)\n","\n","# Calculate base model MSE\n","base_mse = np.sum(np.square(y_test)) / len(y_test)\n","\n","# Calculate R^2 OOS for this fold\n","R2_oos_rf = 1 - (rf_mse/base_mse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uENb8_UwsbwM","executionInfo":{"status":"ok","timestamp":1686175422531,"user_tz":-60,"elapsed":2989526,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"3ba77c70-f1bc-409c-b4ff-133bad33d694"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 49min 59s, sys: 5.19 s, total: 50min 4s\n","Wall time: 49min 49s\n"]}]},{"cell_type":"code","source":["print(f\"R2_OOS RF = {R2_oos_rf}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ZcMS_qauyyy","executionInfo":{"status":"ok","timestamp":1686175423403,"user_tz":-60,"elapsed":8,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"5e3c6281-d99b-474c-d9d1-553c84d62b89"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R2_OOS RF = 0.00015520283007131042\n"]}]},{"cell_type":"markdown","source":["Get top 10 most impotant features:"],"metadata":{"id":"bu1uRUdl6_ZS"}},{"cell_type":"code","source":["%%time\n","# Get R2_OOS for the base model (always predicting excess return = 0)\n","mse_base = np.sum(np.square(y_test)) / len(y_test)\n","\n","drop_R2_oos_rf = []\n","\n","for i in range(X_test.shape[1]):\n","\n","  # Set a predictor of interest to zero\n","  X_test_zero = X_test.copy()\n","  X_test_zero[:,i] = 0\n","  \n","  # Calculate the new R2_OOS\n","  mse_new = mean_squared_error(rf.predict(X_test_zero), y_test)\n","  R2_oos_new = 1 - (mse_new/mse_base)\n","  \n","  # Calculate the drop in R2_OOS\n","  drop_R2_oos = R2_oos_rf - R2_oos_new\n","  drop_R2_oos_rf.append(drop_R2_oos)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zr9upQ__6_xr","executionInfo":{"status":"ok","timestamp":1686176258929,"user_tz":-60,"elapsed":129617,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"52dfb8f3-5784-4f41-d42c-121d11064ad7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 2min 7s, sys: 2.09 s, total: 2min 9s\n","Wall time: 2min 9s\n"]}]},{"cell_type":"code","source":["# Normalised the values such that they sum to one\n","var_imp_rf = normalize(drop_R2_oos_rf)\n","\n","# Create a dataframe containing predictors and their corresponding variable importance value\n","var_imp_df = pd.DataFrame({'Predictor':X.columns, 'R2_OOS Drop':drop_R2_oos_rf, 'Variable Importance':var_imp_rf})\n","\n","# Remove macro variables rows (we only want to compare the importance of stock characteristics)\n","to_exclude = '|'.join(macro_pred)\n","var_imp_df = var_imp_df[~var_imp_df['Predictor'].str.contains(to_exclude)].reset_index(drop=True)\n","\n","# Get the top 10 important variables\n","var_imp_df = var_imp_df.sort_values('Variable Importance', ascending=False)[:10]\n","\n","display(var_imp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"mF7dlrql7fcA","executionInfo":{"status":"ok","timestamp":1686176356359,"user_tz":-60,"elapsed":224,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"dad8b9ab-d1b7-415f-b6c8-fe11d6b3f997"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   Predictor  R2_OOS Drop  Variable Importance\n","0      mvel1     0.000335             0.353863\n","7      mom1m     0.000136             0.143609\n","87    retvol     0.000020             0.021579\n","84  baspread     0.000019             0.020411\n","8      mom6m     0.000019             0.020336\n","6     indmom     0.000017             0.018108\n","4     dolvol     0.000016             0.017187\n","85       ill     0.000014             0.014352\n","86    maxret     0.000013             0.014204\n","16       agr     0.000007             0.007576"],"text/html":["\n","  <div id=\"df-6563da9a-bc55-4ff7-aacb-21cc31104971\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Predictor</th>\n","      <th>R2_OOS Drop</th>\n","      <th>Variable Importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>mvel1</td>\n","      <td>0.000335</td>\n","      <td>0.353863</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>mom1m</td>\n","      <td>0.000136</td>\n","      <td>0.143609</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>retvol</td>\n","      <td>0.000020</td>\n","      <td>0.021579</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>baspread</td>\n","      <td>0.000019</td>\n","      <td>0.020411</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>mom6m</td>\n","      <td>0.000019</td>\n","      <td>0.020336</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>indmom</td>\n","      <td>0.000017</td>\n","      <td>0.018108</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>dolvol</td>\n","      <td>0.000016</td>\n","      <td>0.017187</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>ill</td>\n","      <td>0.000014</td>\n","      <td>0.014352</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>maxret</td>\n","      <td>0.000013</td>\n","      <td>0.014204</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>agr</td>\n","      <td>0.000007</td>\n","      <td>0.007576</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6563da9a-bc55-4ff7-aacb-21cc31104971')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6563da9a-bc55-4ff7-aacb-21cc31104971 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6563da9a-bc55-4ff7-aacb-21cc31104971');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["get_var_imp_plot(var_imp_df, 'Random Forest')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"RDbNOnzD8WzC","executionInfo":{"status":"ok","timestamp":1686176385161,"user_tz":-60,"elapsed":534,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"42baef11-4425-4078-f233-ef71ff1104ab"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## LASSO Model"],"metadata":{"id":"BTv0Jr5RAV4a"}},{"cell_type":"markdown","source":["Lasso Regression, or simply Lasso (Least Absolute Shrinkage and Selection Operator) is a machine learning model which builds on the OLS regression by adding in regularization to the model. It applies a penatly Lambda (λ) for each coefficient in the regression and as such, will yield a more consistent estimator for out of sample values / predictions. \n","\n","The economic motivation for using lasso is that we run two OLS regressions - one with all the features, and one with ten and the one with all the features perfomed worse out of sample. As a result we know that the model was overfitting, so we are trying to use regularization to overfit a bit less. "],"metadata":{"id":"DiOS8uZJaTPk"}},{"cell_type":"code","source":["start_year = '1957-03'\n","end_year = '2016-12'\n","train_size = 30        # Number of years in the training set\n","val_size = 20          # Number of years in the validation set\n","test_size = 2          # Number of years in the test set\n","step = 2               # Size increase in training set (in years) from one fold to the next"],"metadata":{"id":"N8clf2cGBLVo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Model testing\n","Already obtained the best lambda (0.01) from coursework Q4"],"metadata":{"id":"t9ncYs0EAbCM"}},{"cell_type":"code","source":["%%time\n","# Run time: 4 min per model\n","date = df[\"date\"]\n","\n","fold_test_lasso = []\n","test_lasso_mse = []\n","test_base_mse = []\n","test_R2_oos_lasso = []\n","\n","for i, (train_end, val_end, test_end) in enumerate(custom_ts_split(start_year, end_year, train_size, val_size, test_size, step)):\n","    \n","    print(f\"Working with Fold {i+1}...\")\n","    fold_test_lasso.append(i+1)\n","    \n","    # Define training set\n","    training = (date <= val_end)\n","    X_train, y_train = X.loc[training].values, y.loc[training].values\n","    \n","    # Define test set\n","    test = (date > val_end) & (date <= test_end)\n","    X_test, y_test = X.loc[test].values, y.loc[test].values\n","\n","    # Train LASSO using the best lambda penalty\n","    lasso = Lasso(alpha=0.01)\n","    lasso.fit(X_train, y_train)\n","    \n","    # Use trained models to make predictions\n","    pred_lasso = lasso.predict(X_test)\n","    \n","    # Calculate prediction model MSE\n","    lasso_mse = mean_squared_error(pred_lasso, y_test)\n","    test_lasso_mse.append(lasso_mse)\n","\n","    # Calculate base model MSE\n","    base_mse = np.sum(np.square(y_test)) / len(y_test)\n","    test_base_mse.append(base_mse)\n","\n","    # Calculate R^2 OOS for this fold\n","    R2_oos_lasso = 1 - (lasso_mse/base_mse)\n","    \n","    test_R2_oos_lasso.append(R2_oos_lasso)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LCzndfL-AjBg","executionInfo":{"status":"ok","timestamp":1686177662397,"user_tz":-60,"elapsed":27580,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"08eb22b4-ea36-4769-99dc-3c624ca05172"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Working with Fold 1...\n","Working with Fold 2...\n","Working with Fold 3...\n","Working with Fold 4...\n","Working with Fold 5...\n","CPU times: user 58.1 s, sys: 45.1 s, total: 1min 43s\n","Wall time: 27.3 s\n"]}]},{"cell_type":"code","source":["test_lasso = pd.DataFrame({'Fold':fold_test, 'MSE_base':test_base_mse, 'MSE_NN2':test_lasso_mse, 'R2_OOS_NN2':test_R2_oos_lasso})\n","R2_oos_lasso = sum(test_R2_oos_lasso) / len(test_R2_oos_lasso)\n","\n","display(test_lasso)\n","print(f\"R2_OOS LASSO = {R2_oos_lasso}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"ddr441WqBOpy","executionInfo":{"status":"ok","timestamp":1686177728560,"user_tz":-60,"elapsed":197,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"2b1c7c0e-0493-41f6-d7de-8184a16b095e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["   Fold  MSE_base   MSE_NN2  R2_OOS_NN2\n","0     1  0.034065  0.034522   -0.013432\n","1     2  0.035054  0.034632    0.012023\n","2     3  0.018628  0.018600    0.001488\n","3     4  0.016835  0.016727    0.006438\n","4     5  0.027136  0.027142   -0.000193"],"text/html":["\n","  <div id=\"df-09aa1441-eaf5-41e0-ac35-740268e4b8cd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fold</th>\n","      <th>MSE_base</th>\n","      <th>MSE_NN2</th>\n","      <th>R2_OOS_NN2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.034065</td>\n","      <td>0.034522</td>\n","      <td>-0.013432</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.035054</td>\n","      <td>0.034632</td>\n","      <td>0.012023</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.018628</td>\n","      <td>0.018600</td>\n","      <td>0.001488</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.016835</td>\n","      <td>0.016727</td>\n","      <td>0.006438</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.027136</td>\n","      <td>0.027142</td>\n","      <td>-0.000193</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09aa1441-eaf5-41e0-ac35-740268e4b8cd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-09aa1441-eaf5-41e0-ac35-740268e4b8cd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-09aa1441-eaf5-41e0-ac35-740268e4b8cd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["R2_OOS LASSO = 0.001264874313360065\n"]}]},{"cell_type":"markdown","source":["Get top 10 most important variables:"],"metadata":{"id":"XxJDcNXFBsyW"}},{"cell_type":"code","source":["%%time\n","# Get R2_OOS for the base model (always predicting excess return = 0)\n","mse_base = np.sum(np.square(y_test)) / len(y_test)\n","\n","drop_R2_oos_lasso = []\n","\n","for i in range(X_test.shape[1]):\n","\n","  # Set a predictor of interest to zero\n","  X_test_zero = X_test.copy()\n","  X_test_zero[:,i] = 0\n","  \n","  # Calculate the new R2_OOS\n","  mse_new = mean_squared_error(lasso.predict(X_test_zero), y_test)\n","  R2_oos_new = 1 - (mse_new/mse_base)\n","  \n","  # Calculate the drop in R2_OOS\n","  drop_R2_oos = R2_oos_lasso - R2_oos_new\n","  drop_R2_oos_lasso.append(drop_R2_oos)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cf0tmdnaBPDr","executionInfo":{"status":"ok","timestamp":1686177820279,"user_tz":-60,"elapsed":7596,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"979f7601-57e2-4057-fea4-2323cbb34f15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 46.4 s, sys: 4min 1s, total: 4min 47s\n","Wall time: 7.33 s\n"]}]},{"cell_type":"code","source":["# Normalised the values such that they sum to one\n","var_imp_lasso = normalize(drop_R2_oos_lasso)\n","\n","# Create a dataframe containing predictors and their corresponding variable importance value\n","var_imp_df = pd.DataFrame({'Predictor':X.columns, 'R2_OOS Drop':drop_R2_oos_lasso, 'Variable Importance':var_imp_lasso})\n","\n","# Remove macro variables rows (we only want to compare the importance of stock characteristics)\n","to_exclude = '|'.join(macro_pred)\n","var_imp_df = var_imp_df[~var_imp_df['Predictor'].str.contains(to_exclude)].reset_index(drop=True)\n","\n","# Get the top 10 important variables\n","var_imp_df = var_imp_df.sort_values('Variable Importance', ascending=False)[:10]\n","\n","display(var_imp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"qWwpGIwnB5_o","executionInfo":{"status":"ok","timestamp":1686177883870,"user_tz":-60,"elapsed":188,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"59d04297-a9a4-45b8-c244-41260711cb67"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["     Predictor  R2_OOS Drop  Variable Importance\n","0        mvel1     0.001458             0.009804\n","68          sp     0.001458             0.009804\n","66         sgr     0.001458             0.009804\n","65  securedind     0.001458             0.009804\n","64     secured     0.001458             0.009804\n","63     salerec     0.001458             0.009804\n","62     saleinv     0.001458             0.009804\n","61    salecash     0.001458             0.009804\n","60        roic     0.001458             0.009804\n","59  realestate     0.001458             0.009804"],"text/html":["\n","  <div id=\"df-742ce477-59c1-4239-a7f3-27002e07f5aa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Predictor</th>\n","      <th>R2_OOS Drop</th>\n","      <th>Variable Importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>mvel1</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>sp</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>sgr</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>securedind</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>secured</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>salerec</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>saleinv</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>salecash</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>roic</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>realestate</td>\n","      <td>0.001458</td>\n","      <td>0.009804</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-742ce477-59c1-4239-a7f3-27002e07f5aa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-742ce477-59c1-4239-a7f3-27002e07f5aa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-742ce477-59c1-4239-a7f3-27002e07f5aa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["get_var_imp_plot(var_imp_df, 'LASSO')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"B1kjHJgsB6jp","executionInfo":{"status":"ok","timestamp":1686177890270,"user_tz":-60,"elapsed":516,"user":{"displayName":"Waitin Lee","userId":"17560582416035178869"}},"outputId":"06ed01f9-33f4-4164-febd-22eb68e2c859"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"accelerator":"TPU","colab":{"machine_shape":"hm","provenance":[],"collapsed_sections":["bcRHD-ZPDieW","eyf7AA_WIRaE","bKashueKchSF","S906KMvmZSVx","gN4ZXCvR6MsI","oZhwRjPb6Fct","DZVThpXqao77","t9ncYs0EAbCM"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}